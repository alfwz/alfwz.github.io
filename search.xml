<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LC015 3Sum</title>
    <url>/2020/LC015-3Sum/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given array nums = [-1, 0, 1, 2, -1, -4],</p>
<p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]<br>Note: The solution set must not contain duplicate triplets.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Sort+TwoSum</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; arrays =<span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length-<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> lo=i+<span class="number">1</span>, hi=nums.length-<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//判断i重复 比较和前一个nums[i]是不是一样或者 第一个</span></span><br><span class="line">            <span class="keyword">if</span>((i&gt;<span class="number">0</span> &amp;&amp; nums[i]!=nums[i-<span class="number">1</span>]) || i==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(lo&lt;hi)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[lo]+nums[hi]==<span class="number">0</span>-nums[i])&#123;  </span><br><span class="line">                        <span class="comment">//判断lo hi重复 注意lo&lt;hi条件</span></span><br><span class="line">                        <span class="keyword">while</span>(lo&lt;hi &amp;&amp; nums[lo]==nums[lo+<span class="number">1</span>]) lo++;</span><br><span class="line">                        <span class="keyword">while</span>(lo&lt;hi &amp;&amp; nums[hi]==nums[hi-<span class="number">1</span>]) hi--;</span><br><span class="line">                        List&lt;Integer&gt; arr= Arrays.asList(nums[i], nums[lo], nums[hi]);</span><br><span class="line">                        arrays.add(arr);</span><br><span class="line">                        lo++;</span><br><span class="line">                        hi--;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[lo]+nums[hi]&gt;<span class="number">0</span>-nums[i])&#123;</span><br><span class="line">                        hi--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        lo++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Two Pointers</category>
      </categories>
      <tags>
        <tag>Two Pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>LC019 Remove Nth Node From End of List</title>
    <url>/2020/LC019-Remove-Nth-Node-From-End-of-List/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</p>
<p>After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul>
<li>Two Pass<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      ListNode dummy =<span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">      dummy.next=head;</span><br><span class="line">      ListNode first=head;</span><br><span class="line">      length= getLength(first, length);</span><br><span class="line">      length = length - n;</span><br><span class="line">      first=dummy;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;length; i++)&#123;</span><br><span class="line">          first=first.next;</span><br><span class="line">      &#125;</span><br><span class="line">      first.next= first.next.next;</span><br><span class="line">      <span class="keyword">return</span> dummy.next;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//错误版本错误原因 使用dummy因为要保证边界条件如 [1] 1 -&gt; []</span></span><br><span class="line">  <span class="comment">// public ListNode removeNthFromEnd(ListNode head, int n) &#123;</span></span><br><span class="line">  <span class="comment">//     ListNode first = head;</span></span><br><span class="line">  <span class="comment">//     length=getLength(first, length);</span></span><br><span class="line">  <span class="comment">//     length=length-n;</span></span><br><span class="line">  <span class="comment">//     for(int i=0; i&lt;length; i++)&#123;</span></span><br><span class="line">  <span class="comment">//         first=first.next;</span></span><br><span class="line">  <span class="comment">//     &#125;</span></span><br><span class="line">  <span class="comment">//     first.next=first.next.next;</span></span><br><span class="line">  <span class="comment">//     return head;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getLength</span><span class="params">(ListNode first, <span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> length;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          length++;</span><br><span class="line">          <span class="keyword">return</span> getLength(first.next, length);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>One Pass</li>
</ul>
<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>List</category>
      </categories>
  </entry>
  <entry>
    <title>LC017 Letter Combinations of a Phone Number</title>
    <url>/2020/LC017-Letter-Combinations-of-a-Phone-Number/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example:</p>
<p>Input: “23”<br>Output: [“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul>
<li>Backtrack<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     Map&lt;String, String&gt; phone = <span class="keyword">new</span> HashMap()&#123;&#123;</span><br><span class="line">            put(<span class="string">"2"</span>, <span class="string">"abc"</span>);</span><br><span class="line">            put(<span class="string">"3"</span>, <span class="string">"def"</span>);</span><br><span class="line">            put(<span class="string">"4"</span>, <span class="string">"ghi"</span>);</span><br><span class="line">            put(<span class="string">"5"</span>, <span class="string">"jkl"</span>);</span><br><span class="line">            put(<span class="string">"6"</span>, <span class="string">"mno"</span>);</span><br><span class="line">            put(<span class="string">"7"</span>, <span class="string">"pqrs"</span>);</span><br><span class="line">            put(<span class="string">"8"</span>, <span class="string">"tuv"</span>);</span><br><span class="line">            put(<span class="string">"9"</span>, <span class="string">"wxyz"</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    List&lt;String&gt; output = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//对应的是每个数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(String combination, String next_digits)</span></span>&#123;</span><br><span class="line">        <span class="comment">//stop case：如果没有数字了结束</span></span><br><span class="line">        <span class="keyword">if</span>(next_digits.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            output.add(combination);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//裁切第一个数字</span></span><br><span class="line">            String digit = next_digits.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//获得数字对应的字母串</span></span><br><span class="line">            String letters = phone.get(digit);</span><br><span class="line">            <span class="comment">//对应的每个字母</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;letters.length(); i++)&#123;</span><br><span class="line">                <span class="comment">//从0开始取每个letter substring左闭右开</span></span><br><span class="line">                String letter = letters.substring(i,i+<span class="number">1</span>);</span><br><span class="line">                backtrack(combination +letter, next_digits.substring(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(digits.length() != <span class="number">0</span>)&#123;</span><br><span class="line">                backtrack(<span class="string">""</span>,digits);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>BFS/DFS</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>BFS</tag>
        <tag>Recursion</tag>
        <tag>Backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LC021 Merge Two Sorted Lists</title>
    <url>/2020/LC021-Merge-Two-Sorted-Lists/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Iteration</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//❓都为负数咋办？</span></span><br><span class="line">        ListNode dummy=<span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode pointer=dummy;</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//每次pointer指针移动后 l指针也要移动一次</span></span><br><span class="line">            <span class="keyword">if</span>(l1.val&lt;=l2.val)&#123;</span><br><span class="line">                pointer.next=l1;</span><br><span class="line">                <span class="comment">//l1指针移到list1下个node</span></span><br><span class="line">                l1=l1.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pointer.next=l2;</span><br><span class="line">                l2=l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            pointer=pointer.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//pointer.next = l1 ==null ? l2 : l1;</span></span><br><span class="line">        <span class="comment">//哪个l指针指着空的 说明另个list剩一个node pointer指过去</span></span><br><span class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            pointer.next=l2;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pointer.next=l1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Recursion</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//问题拆成</span></span><br><span class="line">    <span class="comment">//list1头更小时：list1[0]+merge(list1[1:],list2)</span></span><br><span class="line">    <span class="comment">//list2[0]+merge(list1,list2[1:])</span></span><br><span class="line">    <span class="comment">//return的东西 l1 l2指针一直没变</span></span><br><span class="line">    <span class="keyword">if</span>(l1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l2 ==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class="line">        l1.next=mergeTwoLists(l1.next, l2);</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        l2.next=mergeTwoLists(l1, l2.next);</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>List</category>
      </categories>
      <tags>
        <tag>Recursion</tag>
        <tag>List</tag>
      </tags>
  </entry>
  <entry>
    <title>LC022 Generate Parentheses</title>
    <url>/2020/LC022-Generate-Parentheses/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>For example, given n = 3, a solution set is:</p>
<p>[<br>  “((()))”,<br>  “(()())”,<br>  “(())()”,<br>  “()(())”,<br>  “()()()”<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>回溯讲解：<a href="https://zhuanlan.zhihu.com/p/93530380" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93530380</a><br>回溯三点： 路径 选择条件 结束条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(路径, 选择列表)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>
<p>此题python解题报告：<a href="https://zhuanlan.zhihu.com/p/125801637" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/125801637</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; output_arr = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        backtrack(output_arr, <span class="string">""</span>, <span class="number">0</span>, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> output_arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最大长度为2n</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(List&lt;String&gt; output_arr, String current_string, <span class="keyword">int</span> open, <span class="keyword">int</span> close, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        <span class="comment">//结束条件：当前string长度为2n时 currentString放进output</span></span><br><span class="line">        <span class="keyword">if</span>(current_string.length()==<span class="number">2</span>*max) &#123;</span><br><span class="line">            output_arr.add(current_string);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//左括号小于n都行 </span></span><br><span class="line">        <span class="keyword">if</span>(open &lt;max) backtrack(output_arr, current_string+<span class="string">"("</span>, open+<span class="number">1</span>, close, max);</span><br><span class="line">        <span class="comment">//右括号小于左括号数量都行</span></span><br><span class="line">        <span class="keyword">if</span>(close&lt;open) backtrack(output_arr, current_string+<span class="string">")"</span>, open, close+<span class="number">1</span>, max);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Backtrack</category>
      </categories>
      <tags>
        <tag>Backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LC020 Valid Parentheses</title>
    <url>/2020/LC020-Valid-Parentheses/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: “()”<br>Output: true<br>Example 2:</p>
<p>Input: “()[]{}”<br>Output: true<br>Example 3:</p>
<p>Input: “(]”<br>Output: false<br>Example 4:</p>
<p>Input: “([)]”<br>Output: false<br>Example 5:</p>
<p>Input: “{[]}”<br>Output: true</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul>
<li><p>stack</p>
<pre><code class="java"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{
  Map&lt;Character, Character&gt; mappings =<span class="keyword">new</span> HashMap&lt;Character, Character&gt;()&lt;!--￼<span class="number">0</span>--&gt;;

  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>{
      Stack&lt;Character&gt; parenthesis =<span class="keyword">new</span> Stack&lt;&gt;();
      <span class="comment">//遍历符号串</span>
      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++){
          <span class="keyword">char</span> c = s.charAt(i);
          <span class="comment">//如果这个char是一种左括号 放进stack这个char的右括号</span>
          <span class="keyword">if</span>(mappings.containsKey(c)){
              parenthesis.push(mappings.get(c));
          }
          <span class="comment">//如果这个char是一种右括号</span>
          <span class="keyword">else</span> <span class="keyword">if</span>(mappings.containsValue(c)){
              <span class="comment">//如果这个stack空了 或者 </span>
              <span class="comment">//因为之前放进了对应的右括号pop出来的不是这个有括号则false</span>
              <span class="comment">//判断stack为空用isEmpty（）</span>
              <span class="keyword">if</span>(parenthesis.isEmpty() || parenthesis.pop()!=c){
                  <span class="keyword">return</span> <span class="keyword">false</span>;
              }
          }
      }
      <span class="keyword">return</span> parenthesis.isEmpty();
  }
}</code></pre>
</li>
</ul>
<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Stack</category>
      </categories>
  </entry>
  <entry>
    <title>LC001 Two Sum</title>
    <url>/2020/Leetcode-001/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example:</p>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul>
<li>Map&lt;type, type&gt; map = new HashMap&lt;type, type&gt;()；<br>HaspMap&lt;type, type&gt; map = new HashMap&lt;type, type&gt;()；<br>区别是啥<blockquote>
<p>HashMap是类，Map是接口，HashMap实现了接口Map，就是说HashMap实现了Map所有的方法。<br>  <a href="https://blog.csdn.net/u010648555/article/details/56049460" target="_blank" rel="noopener">java集合系列——java集合概述</a></p>
</blockquote>
</li>
<li><a href="https://blog.csdn.net/renfufei/article/details/16905777" target="_blank" rel="noopener">为什么array求length没有括号而String有?</a><blockquote>
<p>array长度固定，length是可以作为一个final属性</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC002 Add Two Numbers</title>
    <url>/2020/Leetcode-002/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example:</p>
<p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8<br>Explanation: 342 + 465 = 807.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>高精度加法模拟<br>链表遍历、创建<br>注意长度不一样补零和进位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode tail = dummy;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>, carry=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l1 !=<span class="keyword">null</span> || l2 != <span class="keyword">null</span>)&#123;</span><br><span class="line">        sum = (l1 ==<span class="keyword">null</span> ? <span class="number">0</span>: l1.val) +(l2 ==<span class="keyword">null</span> ? <span class="number">0</span>: l2.val) + carry;</span><br><span class="line">        tail.next=<span class="keyword">new</span> ListNode(sum%<span class="number">10</span>);</span><br><span class="line">        tail = tail.next;</span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="keyword">null</span>) l1 = l1.next;</span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="keyword">null</span>) l2 = l2.next;</span><br><span class="line">        carry=sum/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul>
<li>为什么return dummy.next？</li>
<li>为什么错误版本是错的？</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>List</category>
      </categories>
  </entry>
  <entry>
    <title>❓LC004</title>
    <url>/2020/Leetcode-004/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>相当于求两个array合并后sort的median，但复杂度要求O(log(min(m,n)))<br><a href="https://www.youtube.com/watch?v=do7ibYtv5nk" target="_blank" rel="noopener">Cspiration讲的这道挺清楚的</a></p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Binary Search</category>
      </categories>
      <tags>
        <tag>Binary Search</tag>
      </tags>
  </entry>
  <entry>
    <title>First Principle</title>
    <url>/2020/First-Principle/</url>
    <content><![CDATA[<p>看了许知远对话许倬云的这期十三邀视频，再看了微信上的文字完整版，形式不是什么著作书籍，但我认为这绝对是用分崩离析形容不为过的现在大师站出来留下的灯塔，站出来告诉现代人的出路在哪。</p>
<p>许倬云我认为和一般历史学家最大的不同在于他大学本想学数学学理科的，所以他是一个有理科思维的历史学家，对拓扑量子物理什么是有了解的，我个人认为没有纯文科的大师，至少看世界是有缺陷的少一部分的，所以马斯克看马云就像看傻子。</p>
<p>他说的有的话懂了字面意思其实没有很强的感触，没有思考过那样的困境理解不了。最令我振聋发聩的是关于怎么应对这个时代的回答？</p>
<blockquote>
<p>许知远：轴心时代。<br>许倬云：那个时代每个文化圈都冒出人来，冒出一群人来，提出大的问题，多半提出问题不是提出答案，那些问题就始终今天还在我们脑子里边。那一批人问的问题，历代都有人跟着想，我们都在做注脚，可现在对大问题做注脚的人越来越少，因为答案太现成，都像麦当劳一样，思想上的麦当劳，现成答案。随手一抓就一个，短暂吃下去，够饱了，不去想了。所以这些是今天物质生活丰富方便，精神上空虚苍白，甚至没有。人这么做走下去，也就等于人变成活的机器，我们来配合AI（人工智能），不是AI来配合人，没有自己了。</p>
</blockquote>
<blockquote>
<p>许知远：您作为历史学家，怎么看待这一轮技术革命？大数据、AI人工智能……它们会跟历史上的工业革命很相似吗？<br>许倬云：人工智能这个很厉害，这个触及到知识本身的性质，触及到我们掌握知识是不是人人有机会掌握。自从网络革命以后，我们不一定要自己掌握知识资源，就搜索资源就好，但搜索出来是片段的，要掌握则是全貌的。这个世界是正在乱的时候，新的理想没有出现，旧的理想被放在一边。我们没有机会再培养一批所谓知识分子，我们现在知识分子是网络知识分子，是检索机器，不是思考者。</p>
</blockquote>
<blockquote>
<p>许知远：在人类历史上有没有和现在相似的时代？没有方向，没有判断。<br>许倬云：有，第一批氏族时代就是因为大家吃饭也没问题了，农业够发达了，新石器时代的草莽时代已经过去了，吃饭够了，社会秩序基本上也可以了，有个大的社群、大的部落了，若干大的部落构成很大的一个部落国或者一个列国，开始国与国的争，不同想法在斗。<br>于是这个时候孔子也罢，犹太教的先知也罢，佛陀那批人里边也罢，波斯人里的琐罗亚斯德也罢，碰到有些人在不同的念头，不同的想法蹦出来的时候，他在想该怎么走，怎么整合，看到许多零碎的疑问，整合这一套一套。今天的教育不能教育这种人来，今天教育，教育的是凡人，过日子的人，这个教育今天大学的使命不能完成了。但是今天的书刊、信息、搜索工具都很丰富，只要肯用心，一个人可以自己从基本的阅读能力、最起码的思考训练底子上，自己摸出道路来。<br>孔子时代不能做到的事情，董仲舒时代做得到，信息已经丰富到东也有，西也有，董仲舒可以搜集的思想资源，远比孔子时代多，孔子没想到的阴阳五行家，没有想到农家什么，他都出来了。法家都出来了，道家都出来了，道家孔子前也有，而且我觉得那个是已经原始佛教道理，董仲舒也引进来了，只是没警觉大家，这些终于刺激出董仲舒这种人。所以今天的大学教育是令人失望的，尤其美国式大学教育，最大缺陷是它零碎，它是吃自助餐一样的。</p>
</blockquote>
<p>对我而言解答了很久以来我为什么不能形成自己对事物有独立的看法而不只是从别人那里搜索来变成自己的半灌水知识，我觉得我有不错的信息鉴别能力但没有原创输出能力，也就是只能做到检索机器加上鉴别和整理功能。</p>
<p>我想起了马斯克也非常强调了物理里的“第一性原理”，也就是从头算，而不用检索不用类比推理，换种说法把事物拆分到分子再来推导，所以牛顿经典物理后有反常识的相对论理论物理。</p>
<p>我的一个室友是理论物理博士后，讨论一些比较大众统一观点的话题时就发觉他的观点语言不高深但前后就非常通畅而且非常能马上从反的一面说，所以辩论也是这样一个思考训练过程，他说他每天的研究工作就类似用数学公式尝试推翻所谓真理，许倬云也提到了好像是五四过后迷信科学的问题，他说科学不是真理，科学是种对真理的追求精神。</p>
<p>我想起了柯文哲说大学最应该上的课是文学、辩论、逻辑这些基本科目，就我所在的全美80多名的本科学校，更像是自助餐式职业教育，虽然有通识课但比例还是很少，但当然许倬云也说了“今天的书刊、信息、搜索工具都很丰富，只要肯用心，一个人可以自己从基本的阅读能力、最起码的思考训练底子上，自己摸出道路来”，但其实就人类的演变而说，文字这种信息传递方式一定一会被遗弃变成考古学，信息传递方式一定是从结绳到文字到图像未来到神经上的感受可以被量化后通过类似神经的方式直接传导信息，所以阅读我觉得不好说，但书的文字的好处是知识浓度够大够精华，但坦率讲每次阅读文字我是痛苦的，我的方式是网上听不同人来讲一本书我自己看不下去。</p>
<p>所以明天起，吾日三省吾身三问我是谁我从哪里来我到哪里去:-)</p>
]]></content>
      <categories>
        <category>胡说十道</category>
      </categories>
  </entry>
  <entry>
    <title>LC003</title>
    <url>/2020/Leetcode-003/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h2><p>一个两层loop遍历出所有string，然后看这string符不符合unique条件,ans当作temp存目前最长的符合条件的string的length。<br>Nested loops, one loop with i from 0 to length-1, the other one with j from i+1 to length.<br>判断unique使用了<a href="https://www.cnblogs.com/LiaHon/p/11257805.html" target="_blank" rel="noopener">hashset</a>，set因为特性是无序、唯一所以判断存不存在的时候用set比较好吧？这个method的判断逻辑就是把每个substring根据index传进来，然后遍历这个substring检查每个character是不是已经在set中，如果有任意一个character已在set中则不算unique return false，不在的话放进set里。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=s.length(); j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(allUnique(s, i, j)) </span><br><span class="line">                    ans = Math.max(ans, j-i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allUnique</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i&lt;end ;i++)&#123;</span><br><span class="line">            Character ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(set.contains(ch)) </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            set.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-dong-chuang-kou-tu-wen-jiang-jie-by-superychen/" target="_blank" rel="noopener">滑动窗口图文讲解1</a><br><a href="https://www.jianshu.com/p/a4490a6d47fb" target="_blank" rel="noopener">滑动窗口图文讲解2</a><br>还是图解好懂些，文字半天没看懂，图解我自己翻译下就是，这个滑窗首先有三个属性，start, end, length，先滑end，end滑到重复的时候滑一格start，还有重复的话继续滑start，直到没有重复再滑end，结束条件是end=length。<br>其实滑窗法就是代替上面方法里的两层循环，好像array和string经常用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start=<span class="number">0</span>, end=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len=s.length();</span><br><span class="line">        Set&lt;Character&gt; chars= <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(start&lt;len &amp;&amp; end&lt;len)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!chars.contains(s.charAt(end)))&#123;</span><br><span class="line">                chars.add(s.charAt(end));</span><br><span class="line">                end++;</span><br><span class="line">                ans=Math.max(ans,end-start);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                chars.remove(s.charAt(start));</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul>
<li>这地方判断唯一还可以用set外其他的数据结构吗？</li>
<li>如果要把descrption里的example3中pwke也算unique呢？该怎么改？</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC005</title>
    <url>/2020/Leetcode-005/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.</p>
<p>Example 1:</p>
<p>Input: “babad”<br>Output: “bab”<br>Note: “aba” is also a valid answer.<br>Example 2:</p>
<p>Input: “cbbd”<br>Output: “bb”</p>
<h1 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h1><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="❓动态规划"><a href="#❓动态规划" class="headerlink" title="❓动态规划"></a>❓动态规划</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s ==<span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">    String res == <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line">    <span class="comment">//max标记是否为最长</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;s.length(); j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=j;i++)&#123;</span><br><span class="line">            dp[i][j] = s.charAt(i) == s.charAt(j) &amp;&amp; ((j-<span class="number">1</span>&lt;=<span class="number">2</span>)|| dp[i+<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (dp[i][j])&#123;</span><br><span class="line">                <span class="keyword">if</span>( j-i+<span class="number">1</span> &gt;max)&#123;</span><br><span class="line">                   max = j-i+<span class="number">1</span>;</span><br><span class="line">                    res = s.substring(i, j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h2><p>正确版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    String res = <span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s ==<span class="keyword">null</span> || s.length()==<span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            getLongest(s, i ,i);</span><br><span class="line">            getLongest(s, i, i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLongest</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right&lt;s.length() &amp;&amp; s.charAt(left) ==s.charAt(right))&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        String cur = s.substring(left+<span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">if</span>(cur.length() &gt; res.length())&#123;</span><br><span class="line">            res = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>错误版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    String ans=<span class="string">""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="keyword">null</span> || s.length()==<span class="number">0</span> ) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length()%<span class="number">2</span>==<span class="number">0</span>)&#123;getLongest(s, i, i+<span class="number">1</span>);&#125;</span><br><span class="line">            <span class="keyword">if</span>(s.length()%<span class="number">2</span>==<span class="number">1</span>)&#123;getLongest(s,i, i);&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLongest</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(left&gt;<span class="number">0</span> &amp;&amp; right&lt;s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left)==s.charAt(right))&#123;</span><br><span class="line">                right++;</span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans= s.substring(left, right+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1><ul>
<li>错误版本为啥错的？</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>String</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LC010</title>
    <url>/2020/Leetcode-010/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input:<br>s = “aa”<br>p = “a”<br>Output: false<br>Explanation: “a” does not match the entire string “aa”.<br>Example 2:</p>
<p>Input:<br>s = “aa”<br>p = “a*”<br>Output: true<br>Explanation: ‘*’ means zero or more of the preceding element, ‘a’. Therefore, by repeating ‘a’ once, it becomes “aa”.<br>Example 3:</p>
<p>Input:<br>s = “ab”<br>p = “.*”<br>Output: true<br>Explanation: “.*” means “zero or more (*) of any character (.)”.<br>Example 4:</p>
<p>Input:<br>s = “aab”<br>p = “c<em>a</em>b”<br>Output: true<br>Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches “aab”.<br>Example 5:</p>
<p>Input:<br>s = “mississippi”<br>p = “mis<em>is*p</em>.”<br>Output: false</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p> four conoditions:</p>
<ol>
<li>state: dp[i][j]= string s with len i matches string p with len j </li>
<li>init</li>
<li>update function 转移方程: </li>
<li>result</li>
</ol>
<p>❓有indexoutofbound问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] dp =<span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(i)==<span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">1</span>])&#123;</span><br><span class="line">                dp[<span class="number">0</span>][i+<span class="number">1</span>]=<span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fuction</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=p.length(); j++)&#123;</span><br><span class="line">                <span class="comment">//两字母相等或者是p个点 就看上个状态就行</span></span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i)==p.charAt(j)||p.charAt(i)==<span class="string">'.'</span>)&#123;</span><br><span class="line">                    dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=dp[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//p为星号</span></span><br><span class="line">                <span class="keyword">if</span>(p.charAt(j)==<span class="string">'*'</span>)&#123;</span><br><span class="line">                    <span class="comment">//但前面不是相同字母且不是点 比如 "a" "c*a"</span></span><br><span class="line">                    <span class="keyword">if</span>(p.charAt(j-<span class="number">1</span>)!= s.charAt(i) &amp;&amp; p.charAt(j-<span class="number">1</span>)!=<span class="string">'.'</span>)&#123; </span><br><span class="line">                        dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//a* as empty || a* as single a || a* as multiple a </span></span><br><span class="line">                        dp[i+<span class="number">1</span>][j+<span class="number">1</span>]=(dp[i+<span class="number">1</span>][j-<span class="number">1</span>] || dp[i+<span class="number">1</span>][j] || dp[i][j+<span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[s.length()][p.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LC072</title>
    <url>/2020/Leetcode-072/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: word1 = “horse”, word2 = “ros”<br>Output: 3<br>Explanation:<br>horse -&gt; rorse (replace ‘h’ with ‘r’)<br>rorse -&gt; rose (remove ‘r’)<br>rose -&gt; ros (remove ‘e’)<br>Example 2:</p>
<p>Input: word1 = “intention”, word2 = “execution”<br>Output: 5<br>Explanation:<br>intention -&gt; inention (remove ‘t’)<br>inention -&gt; enention (replace ‘i’ with ‘e’)<br>enention -&gt; exention (replace ‘n’ with ‘x’)<br>exention -&gt; exection (replace ‘n’ with ‘c’)<br>exection -&gt; execution (insert ‘u’)</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><ul>
<li>four conoditions:<ol>
<li>state: dp[i][j]: mini steps to convert word1 with len i to word2 with len j</li>
<li>init</li>
<li>update function 转移方程: </li>
<li>result</li>
</ol>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=word1.length();</span><br><span class="line">        <span class="keyword">int</span> n=word2.length();</span><br><span class="line">        <span class="comment">//state: +1因为s(0,i) j(0,j)  </span></span><br><span class="line">        <span class="keyword">int</span>[][] dis=<span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//init:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++) dis[i][<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++) dis[<span class="number">0</span>][j]=j;</span><br><span class="line">        <span class="comment">//function:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;= n; j++)&#123;</span><br><span class="line">                dis[i][j]=Integer.Max_VALUE;</span><br><span class="line">                <span class="comment">//如果当前两个字符相等</span></span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>) ==word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//上面和左边</span></span><br><span class="line">                    dis[i][j]=Math.min(dis[i-<span class="number">1</span>][j], dis[i][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//左上</span></span><br><span class="line">                    dis[i][j]=Math.min(dis[i][j], dis[i-<span class="number">1</span>][j-<span class="number">1</span>]); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前两个字符不一样</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dis[i][j]=Math.min(dis[i-<span class="number">1</span>][j], dis[i][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    dis[i][j]=Math.min(dis[i][j], dis[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode ZERO</title>
    <url>/2020/Leetcode0/</url>
    <content><![CDATA[<h1 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h1><blockquote>
<p>18号考完最后一门到现在也一周了，坦率的讲到今天为止，刷了3道，还是那种现在叫我写不一定bug free的。。</p>
</blockquote>
<h2 id="如何刷"><a href="#如何刷" class="headerlink" title="如何刷"></a>如何刷</h2><ul>
<li>Externally motivated的人还是适合找几个人一起写，而且po在网上。成一件事，只考虑自己不考虑他人的最好的办法就是先把自己推到那个位置，笨将军和聪明士兵同时指挥战斗还是笨将军大概率好些</li>
<li>看到没思路5分钟直接看答案查资料写笔记，完事自己写一遍，别有负罪感</li>
<li>先量后质</li>
<li>别用IDE，面试写白板</li>
<li>我个人用JAVA刷，python没java熟悉，而且怎么说来着语法糖太多了python，不利于刚开始理解很多结构，而且官方solution都是java的</li>
<li>先刷top100，再把前两百刷完</li>
<li>很多人说分类，刚开始我只打算做tag标记类型，<a href="https://zxi.mytechroad.com/blog/leetcode-problem-categories/" target="_blank" rel="noopener">花花酱的题目分类</a></li>
<li>5/31Updated: 先按照huahua的题目分类，两百道的分类刷，每天3道左右</li>
<li>6/9Updated: 才发现top100也可以选tag，hard想太久了，一天5道medium/easy</li>
</ul>
<h2 id="刷多少"><a href="#刷多少" class="headerlink" title="刷多少"></a>刷多少</h2><p>从0开始刷，暑假目标要刷到200道的话，每天至少3道吧，也肯定不止刷一遍。</p>
<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><blockquote>
<p>github+hexo+next搭建静态博客还是挺好玩的，强迫症也觉得挺好看的，个人不喜欢有的花里胡哨的特效，总之真的可以像微信广告说的0编程基础。</p>
</blockquote>
<h2 id="未实现功能"><a href="#未实现功能" class="headerlink" title="未实现功能"></a>未实现功能</h2><p>相册，书籍，电影，自定义page。</p>
]]></content>
      <categories>
        <category>胡说十道</category>
      </categories>
  </entry>
  <entry>
    <title>LC034 Find First and Last Position of Element in Sorted Array</title>
    <url>/2020/LC034-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: nums = [5,7,7,8,8,10], target = 8<br>Output: [3,4]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">        result[<span class="number">0</span>]= findStartingIndex(nums, target);</span><br><span class="line">        result[<span class="number">1</span>]= findEndingIndex(nums, target);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findStartingIndex</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end =nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">            <span class="keyword">int</span> midpoint=start+(end-start)/<span class="number">2</span>; </span><br><span class="line">            <span class="comment">//如果mid大于 target 下次搜左区间 且因为可能有重复值 就算找到也向左移end</span></span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]&gt;=target) &#123;</span><br><span class="line">                end= midpoint-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                start=midpoint+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//update index</span></span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]==target) index=midpoint;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findEndingIndex</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end =nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(start&lt;=end)&#123;</span><br><span class="line">            <span class="keyword">int</span> midpoint=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]&lt;=target)&#123;</span><br><span class="line">                start= midpoint+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                end =midpoint-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]==target) index=midpoint;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Binary Search</category>
      </categories>
  </entry>
  <entry>
    <title>LC033 Search in Rotated Sorted Array</title>
    <url>/2020/LC033-Search-in-Rotated-Sorted-Array/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: nums = [5,7,7,8,8,10], target = 8<br>Output: [3,4]</p>
<p>Input: nums = [4,5,6,7,0,1,2], target = 3<br>Output: -1</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>转化成两个sorted array再去logn binary search</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right= nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//找到最小index </span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="keyword">int</span> midpoint=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="comment">//升序数列 如果mid比right大 left移到mid右边</span></span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]&gt;nums[right])&#123;</span><br><span class="line">                left=midpoint+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果mid小于等于right right移到mid 不-1因为避免和left重叠</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right=midpoint;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//start是最小值index</span></span><br><span class="line">        <span class="keyword">int</span> start =left;</span><br><span class="line">        <span class="comment">//重置left right</span></span><br><span class="line">        left =<span class="number">0</span>;</span><br><span class="line">        right =nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断target在哪半部分</span></span><br><span class="line">        <span class="keyword">if</span>(target&gt;=nums[start] &amp;&amp; target &lt;=nums[right])&#123;</span><br><span class="line">            left=start;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right=start;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//终止条件left=right</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> midpoint= left +(right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[midpoint]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> midpoint;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[midpoint]&lt;target)&#123;</span><br><span class="line">                left=midpoint+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = midpoint-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Binary Search</category>
      </categories>
  </entry>
  <entry>
    <title>LC046  Permutations</title>
    <url>/2020/LC046-Permutations/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        findAllCombinations(res, <span class="keyword">new</span> ArrayList&lt;&gt;(), nums, <span class="keyword">new</span> HashSet&lt;Integer&gt;());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//hashset用来记录这个数是否之前已经用过</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllCombinations</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; currentList, <span class="keyword">int</span>[] nums, HashSet&lt;Integer&gt; set)</span></span>&#123;</span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="keyword">if</span>(currentList.size() == nums.length)&#123;</span><br><span class="line">            <span class="comment">//res.add(new ArrayList&lt;Integer&gt;(currentList));</span></span><br><span class="line">            res.add(currentList);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">                <span class="comment">//当前nums[i]是不是有效的</span></span><br><span class="line">                <span class="keyword">if</span>(!set.contains(nums[i]))&#123;</span><br><span class="line">                    currentList.add(nums[i]);</span><br><span class="line">                    <span class="keyword">int</span> last = currentList.size() - <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//用过了就加到set里</span></span><br><span class="line">                    set.add(nums[i]);</span><br><span class="line">                    findAllCombinations(res, currentList, nums, set);</span><br><span class="line">                    <span class="comment">//剪枝</span></span><br><span class="line">                    set.remove(nums[i]);</span><br><span class="line">                    currentList.remove(last);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Backtrack</category>
      </categories>
      <tags>
        <tag>Backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LC039 Combination Sum</title>
    <url>/2020/LC039-Combination-Sum/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: [1,2,3]<br>Output:<br>[<br>  [1,2,3],<br>  [1,3,2],<br>  [2,1,3],<br>  [2,3,1],<br>  [3,1,2],<br>  [3,2,1]<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><a href="https://www.youtube.com/watch?v=irFtGMLbf-s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=irFtGMLbf-s</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">         List&lt;List&lt;Integer&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(candidates ==<span class="keyword">null</span> || candidates.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        </span><br><span class="line">        List&lt;Integer&gt; combination =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        toFindCombinationsToTarget(results, combination, candidates, target, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">toFindCombinationsToTarget</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; results, List&lt;Integer&gt; combination, <span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target, <span class="keyword">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//deep copy</span></span><br><span class="line">            results.add(<span class="keyword">new</span> ArrayList&lt;&gt;(combination));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=startIndex; i&lt;candidates.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(candidates[i]&gt;target)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            combination.add(candidates[i]);</span><br><span class="line">            toFindCombinationsToTarget(results, combination, candidates, target - candidates[i], i);</span><br><span class="line">            combination.remove(combination.size() -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>BFS/DFS</category>
      </categories>
  </entry>
  <entry>
    <title>LC048 Rotate Image</title>
    <url>/2020/LC048-Rotate-Image/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given input matrix =<br>[<br>  [1,2,3],<br>  [4,5,6],<br>  [7,8,9]<br>],</p>
<p>rotate the input matrix in-place such that it becomes:<br>[<br>  [7,4,1],<br>  [8,5,2],<br>  [9,6,3]<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = matrix.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i; j&lt;N; j++)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//水平翻转 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;(N/<span class="number">2</span>); j++)&#123;</span><br><span class="line">               <span class="keyword">int</span> temp = matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[i][N-j-<span class="number">1</span>];</span><br><span class="line">                matrix[i][N-<span class="number">1</span>-j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC989 Add to Array-Form of Integer</title>
    <url>/2020/LC989-Add-to-Array-Form-of-Integer/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: A = [1,2,0,0], K = 34<br>Output: [1,2,3,4]<br>Explanation: 1200 + 34 = 1234</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">addToArrayForm</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> i = A.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> || K&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> op1 = <span class="number">0</span>, op2 = <span class="number">0</span>;</span><br><span class="line">            op1 = K%<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                op2 = A[i--];</span><br><span class="line">            &#125;</span><br><span class="line">            sum = op1 + op2 + carry;</span><br><span class="line">            carry = sum/<span class="number">10</span>;</span><br><span class="line">            res.add(sum%<span class="number">10</span>);</span><br><span class="line">            K/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(carry&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            res.add(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Collections.reverse(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC1047 Remove All Adjacent Duplicates In String</title>
    <url>/2020/LC1047-Remove-All-Adjacent-Duplicates-In-String/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: “abbaca”<br>Output: “ca”<br>Explanation:<br>For example, in “abbaca” we could remove “bb” since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is “aaca”, of which only “aa” is possible, so the final string is “ca”.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">removeDuplicates</span><span class="params">(String S)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">//东西都现在stack</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;S.length(); i++)&#123;</span><br><span class="line">            <span class="comment">//stack有东西 或者 一样了 </span></span><br><span class="line">            <span class="keyword">if</span>(!stack.empty() &amp;&amp; stack.peek() == S.charAt(i))&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(S.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//stack剩下的才是需要的再拿出来</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            str = stack.pop() + str;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Stack</category>
      </categories>
  </entry>
  <entry>
    <title>LC049 Group Anagrams</title>
    <url>/2020/LC049-Group-Anagrams/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”],<br>Output:<br>[<br>  [“ate”,”eat”,”tea”],<br>  [“nat”,”tan”],<br>  [“bat”]<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strs.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(String str :strs)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] curr = str.toCharArray();</span><br><span class="line">            Arrays.sort(curr);</span><br><span class="line">            <span class="comment">//char [a,b,c] -&gt; string "abc"</span></span><br><span class="line">            String sortedStr = String.valueOf(curr);</span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(sortedStr))&#123;</span><br><span class="line">                map.put(sortedStr, <span class="keyword">new</span> ArrayList());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//map.get().add() 往已有key里面加东西</span></span><br><span class="line">            map.get(sortedStr).add(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC055 Jump Game</title>
    <url>/2020/LC055-Jump-Game/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: nums = [2,3,1,1,4]<br>Output: true<br>Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.<br>Example 2:</p>
<p>Input: nums = [3,2,1,0,4]<br>Output: false<br>Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>贪心算法<br>我理解的在这里的意思就是倒着遍历array 记录下每个点的左边最远走多远</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastGoodIndexPosition = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.length -<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="comment">//看nums[i]能不能到达leftmostGOOD 能到达把nums[i]标记为新的leftmostGOOD</span></span><br><span class="line">            <span class="keyword">if</span>(i + nums[i] &gt;= lastGoodIndexPosition)&#123;</span><br><span class="line">                lastGoodIndexPosition = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastGoodIndexPosition==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//最远能到达的位置</span></span><br><span class="line">        <span class="keyword">int</span> reach = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length &amp;&amp; i&lt;=reach; i++)&#123;</span><br><span class="line">            reach = Math.max(nums[i]+i, reach);</span><br><span class="line">            <span class="keyword">if</span>(reach &gt;= nums.length-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Backtrack</tag>
        <tag>DP</tag>
        <tag>Greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>LC056 Merge Intervals</title>
    <url>/2020/LC056-Merge-Intervals/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: [[1,3],[2,6],[8,10],[15,18]]<br>Output: [[1,6],[8,10],[15,18]]<br>Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].<br>Example 2:</p>
<p>Input: [[1,4],[4,5]]<br>Output: [[1,5]]<br>Explanation: Intervals [1,4] and [4,5] are considered overlapping.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] merge(<span class="keyword">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="keyword">if</span>(intervals == <span class="keyword">null</span> || intervals.length ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>][];</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;<span class="keyword">int</span>[]&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把start end 分别放进两个array且sort</span></span><br><span class="line">        <span class="keyword">int</span>[] start = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.length];</span><br><span class="line">        <span class="keyword">int</span>[] end = <span class="keyword">new</span> <span class="keyword">int</span>[intervals.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;intervals.length; i++)&#123;</span><br><span class="line">            start[i] = intervals[i][<span class="number">0</span>];</span><br><span class="line">            end[i] = intervals[i][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(start);</span><br><span class="line">        Arrays.sort(end);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//相当于看下一组的start有没有大于这组的end 如果大于更新j起始点 </span></span><br><span class="line">        <span class="comment">//如果没有小于或者等于 相当于overlap </span></span><br><span class="line">        <span class="comment">//结束条件是倒数第二个元素</span></span><br><span class="line">        <span class="comment">//单独加入最后一组</span></span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;intervals.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(start[i+<span class="number">1</span>]&gt;end[i])&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start[j], end[i]&#125;);</span><br><span class="line">                j=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="keyword">int</span>[] &#123;start[j], end[intervals.length - <span class="number">1</span>]&#125;); </span><br><span class="line">        <span class="comment">//list 转array</span></span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[res.size()][]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC062 Unique Paths</title>
    <url>/2020/LC062-Unique-Paths/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: m = 3, n = 2<br>Output: 3<br>Explanation:<br>From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:</p>
<ol>
<li>Right -&gt; Right -&gt; Down</li>
<li>Right -&gt; Down -&gt; Right</li>
<li>Down -&gt; Right -&gt; Right<br>Example 2:</li>
</ol>
<p>Input: m = 7, n = 3<br>Output: 28</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//brute force</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> countPaths(m-<span class="number">1</span>, n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countPaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m&lt;<span class="number">0</span> || n &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">0</span> || n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countPaths(m-<span class="number">1</span>, n) + countPaths(m, n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//DP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state</span></span><br><span class="line">        <span class="keyword">int</span> [][]dp = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="comment">//init</span></span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//update function</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i][j-<span class="number">1</span>] + dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC070 Climbing Stairs</title>
    <url>/2020/LC070-Climbing-Stairs/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state: how many ways at each stair</span></span><br><span class="line">        <span class="keyword">int</span> dp[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//update</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="comment">//numbers of ways at stair i = ways at stair(i-1) + stair(i-2)</span></span><br><span class="line">            dp[i]=dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> current = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> prev =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            current = current+prev;</span><br><span class="line">            prev=current-prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC064 Minimum Path Sum</title>
    <url>/2020/LC064-Minimum-Path-Sum/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input:<br>[<br>  [1,3,1],<br>  [1,5,1],<br>  [4,2,1]<br>]<br>Output: 7<br>Explanation: Because the path 1→3→1→1→1 minimizes the sum.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minPathSum</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp=<span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=grid.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=grid[<span class="number">0</span>].length-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//先走j 也就是bottom right -&gt;bottom left</span></span><br><span class="line">                <span class="comment">//init</span></span><br><span class="line">                <span class="keyword">if</span>(i==grid.length-<span class="number">1</span> &amp;&amp; j==grid[<span class="number">0</span>].length-<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=grid[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理下边路</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i==grid.length-<span class="number">1</span> &amp;&amp; j!=grid[<span class="number">0</span>].length-<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=grid[i][j] + dp[i][j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理右边路</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==grid[<span class="number">0</span>].length-<span class="number">1</span> &amp;&amp; i!=grid.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=grid[i][j] + dp[i+<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理中间</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i!=grid.length-<span class="number">1</span> &amp;&amp; j!=grid[<span class="number">0</span>].length-<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=grid[i][j] + Math.min(dp[i][j+<span class="number">1</span>], dp[i+<span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">              </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC075 Sort Colors</title>
    <url>/2020/LC075-Sort-Colors/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p0=<span class="number">0</span>, curr=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> p2=nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(curr&lt;=p2)&#123;</span><br><span class="line">            <span class="comment">//curr跑到0说明nums[curr]应该到左边去</span></span><br><span class="line">            <span class="keyword">if</span>(nums[curr]==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//swap nums[p0] and nums[curr]</span></span><br><span class="line">                temp=nums[p0];</span><br><span class="line">                nums[p0]=nums[curr];</span><br><span class="line">                nums[curr]=temp; </span><br><span class="line">                p0++;</span><br><span class="line">                curr++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//curr跑到2说明nums[curr]应该到右边去</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[curr]==<span class="number">2</span>)&#123;</span><br><span class="line">                temp=nums[curr];</span><br><span class="line">                nums[curr]=nums[p2];</span><br><span class="line">                nums[p2--]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cur跑到1说明nums[curr]在中间 curr后移</span></span><br><span class="line">            <span class="keyword">else</span> curr++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC072 Edit Distance</title>
    <url>/2020/LC072-Edit-Distance/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: word1 = “horse”, word2 = “ros”<br>Output: 3<br>Explanation:<br>horse -&gt; rorse (replace ‘h’ with ‘r’)<br>rorse -&gt; rose (remove ‘r’)<br>rose -&gt; ros (remove ‘e’)</p>
<p>Example 2:</p>
<p>Input: word1 = “intention”, word2 = “execution”<br>Output: 5<br>Explanation:<br>intention -&gt; inention (remove ‘t’)<br>inention -&gt; enention (replace ‘i’ with ‘e’)<br>enention -&gt; exention (replace ‘n’ with ‘x’)<br>exention -&gt; exection (replace ‘n’ with ‘c’)<br>exection -&gt; execution (insert ‘u’)</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDistance</span><span class="params">(String word1, String word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m=word1.length();</span><br><span class="line">        <span class="keyword">int</span> n=word2.length();</span><br><span class="line">        <span class="comment">//state: 代表两个字符变相同需要的步数</span></span><br><span class="line">        <span class="comment">//+1因为s(0,i) j(0,j) </span></span><br><span class="line">        <span class="keyword">int</span>[][] dis=<span class="keyword">new</span> <span class="keyword">int</span>[m+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//init:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i++) dis[i][<span class="number">0</span>]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; j++) dis[<span class="number">0</span>][j]=j;</span><br><span class="line">        <span class="comment">//function:</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;= n; j++)&#123;</span><br><span class="line">                dis[i][j]=Integer.MAX_VALUE;</span><br><span class="line">                <span class="comment">//如果当前两个字符相等</span></span><br><span class="line">                <span class="keyword">if</span>(word1.charAt(i-<span class="number">1</span>) ==word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//上面和左边</span></span><br><span class="line">                    dis[i][j]=Math.min(dis[i-<span class="number">1</span>][j], dis[i][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//左上</span></span><br><span class="line">                    dis[i][j]=Math.min(dis[i][j], dis[i-<span class="number">1</span>][j-<span class="number">1</span>]); </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前两个字符不一样</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dis[i][j]=Math.min(dis[i-<span class="number">1</span>][j], dis[i][j-<span class="number">1</span>])+<span class="number">1</span>;</span><br><span class="line">                    dis[i][j]=Math.min(dis[i][j], dis[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dis[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC053 Maximum Subarray</title>
    <url>/2020/LC053-Maximum-Subarray/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: [-2,1,-3,4,-1,2,1,-5,4],<br>Output: 6<br>Explanation: [4,-1,2,1] has the largest sum = 6.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state: 包括了nums[i]时的最大值</span></span><br><span class="line">        <span class="keyword">int</span> dp[]=<span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//init</span></span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxSum=dp[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//function</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[i-<span class="number">1</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                dp[i]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i]=nums[i]+dp[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            maxSum=Math.max(maxSum, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC079 Word Search</title>
    <url>/2020/LC079-Word-Search/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>board =<br>[<br>  [‘A’,’B’,’C’,’E’],<br>  [‘S’,’F’,’C’,’S’],<br>  [‘A’,’D’,’E’,’E’]<br>]</p>
<p>Given word = “ABCCED”, return true.<br>Given word = “SEE”, return true.<br>Given word = “ABCB”, return false.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整体思路 从任意点出发</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (board == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[][] used = <span class="keyword">new</span> <span class="keyword">boolean</span>[board.length][board[<span class="number">0</span>].length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> row=<span class="number">0</span>; row&lt;board.length; row++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> col=<span class="number">0</span>; col&lt;board[<span class="number">0</span>].length; col++)&#123;</span><br><span class="line">                <span class="comment">//以当前为起点能找到这个word</span></span><br><span class="line">                <span class="keyword">if</span>(existHelper(board, used, word.toCharArray(), <span class="number">0</span>, col, row))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//char word 和 idx =string word</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">existHelper</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">boolean</span>[][] used, <span class="keyword">char</span>[] word, <span class="keyword">int</span> idx, <span class="keyword">int</span> col, <span class="keyword">int</span> row)</span></span>&#123;</span><br><span class="line">        <span class="comment">//整个string被找到</span></span><br><span class="line">        <span class="keyword">if</span> (idx ==word.length) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//出界情况  </span></span><br><span class="line">        <span class="keyword">if</span> (row&lt;<span class="number">0</span> || row&gt;=board.length || col&lt;<span class="number">0</span> || col&gt;=board[<span class="number">0</span>].length) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//返回发现是用过的 或者当前字符和要找的字符不相同</span></span><br><span class="line">        <span class="keyword">if</span> (used[row][col]==<span class="keyword">true</span> || board[row][col]!=word[idx]) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//通过后对当前记录做记录  </span></span><br><span class="line">        used[row][col] =<span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//right</span></span><br><span class="line">        <span class="keyword">boolean</span> exist =existHelper(board, used, word, idx+<span class="number">1</span>, col+<span class="number">1</span>, row);</span><br><span class="line">        <span class="comment">//一个方向找到了就不找了</span></span><br><span class="line">        <span class="keyword">if</span>(exist) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//left</span></span><br><span class="line">        exist =existHelper(board, used, word, idx+<span class="number">1</span>, col-<span class="number">1</span>, row);</span><br><span class="line">        <span class="keyword">if</span>(exist) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//down</span></span><br><span class="line">        exist = existHelper(board, used, word, idx+<span class="number">1</span>, col, row+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(exist) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//up</span></span><br><span class="line">        exist = existHelper(board, used, word,idx+<span class="number">1</span>, col,row-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(exist) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//都没找到</span></span><br><span class="line">        used[row][col]=<span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Backtrack</tag>
      </tags>
  </entry>
  <entry>
    <title>LC078 Subsets</title>
    <url>/2020/LC078-Subsets/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: nums = [1,2,3]<br>Output:<br>[<br>  [3],<br>  [1],<br>  [2],<br>  [1,2,3],<br>  [1,3],<br>  [2,3],<br>  [1,2],<br>  []<br>]</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        LinkedList&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums ==<span class="keyword">null</span> || nums.length ==<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">        subsetsHelper(nums, <span class="number">0</span>, result, <span class="keyword">new</span> LinkedList&lt;Integer&gt;());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个 list curr 存当前状态</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">subsetsHelper</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> currIdx, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; curr)</span></span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> LinkedList&lt;Integer&gt;(curr));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> idx = currIdx; idx&lt;nums.length; idx++)&#123;</span><br><span class="line">            curr.add(nums[idx]);</span><br><span class="line">            subsetsHelper(nums, idx+<span class="number">1</span>, result, curr);</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            curr.remove(curr.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Backtrack</category>
      </categories>
  </entry>
  <entry>
    <title>LC094 Binary Tree Inorder Traversal</title>
    <url>/2020/LC094-Binary-Tree-Inorder-Traversal/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: <span class="number">3</span></span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line">Explanation:</span><br><span class="line">Given n = <span class="number">3</span>, there are a total of <span class="number">5</span> unique BST<span class="string">'s:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   1         3     3      2      1</span></span><br><span class="line"><span class="string">    \       /     /      / \      \</span></span><br><span class="line"><span class="string">     3     2     1      1   3      2</span></span><br><span class="line"><span class="string">    /     /       \                 \</span></span><br><span class="line"><span class="string">   2     1         2                 3</span></span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stack</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack &lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode curr = root;</span><br><span class="line">        <span class="comment">//node 为空且 stack也是空</span></span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//走到最left 且把所有左子树存进stack</span></span><br><span class="line">            <span class="keyword">while</span>(curr!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//每下一层都把curr存进stack</span></span><br><span class="line">                stack.push(curr);</span><br><span class="line">                <span class="comment">//指针一直走到null</span></span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//走到最左下 指针指pop出来的值</span></span><br><span class="line">            curr =stack.pop();</span><br><span class="line">            res.add(curr.val);</span><br><span class="line">            <span class="comment">//看当前node有没有右子树</span></span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DFS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; res = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        DFS(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//叶子节点 node.left=null 返回上次dfs res.add(node.val)</span></span><br><span class="line">    <span class="comment">//同理 node.right</span></span><br><span class="line">    <span class="comment">//这个node结束后返回上次DFS</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode node, LinkedList&lt;Integer&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        DFS(node.left, res);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        DFS(node.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>Stack</tag>
      </tags>
  </entry>
  <entry>
    <title>LC096 Unique Binary Search Trees</title>
    <url>/2020/LC096-Unique-Binary-Search-Trees/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Input: <span class="number">3</span></span><br><span class="line">Output: <span class="number">5</span></span><br><span class="line">Explanation:</span><br><span class="line">Given n = <span class="number">3</span>, there are a total of <span class="number">5</span> unique BST<span class="string">'s:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   1         3     3      2      1</span></span><br><span class="line"><span class="string">    \       /     /      / \      \</span></span><br><span class="line"><span class="string">     3     2     1      1   3      2</span></span><br><span class="line"><span class="string">    /     /       \                 \</span></span><br><span class="line"><span class="string">   2     1         2                 3</span></span><br></pre></td></tr></table></figure>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回数量或者boolean 常用动态规划</span></span><br><span class="line"><span class="comment">//state [i] i个节点时的结构数量</span></span><br><span class="line"><span class="comment">//init [0] 0个节点0个数量</span></span><br><span class="line"><span class="comment">//func 找规律</span></span><br><span class="line"><span class="comment">//result [n]</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> nums[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        nums[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//n总节点数 j左子树数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">                <span class="comment">// i-j-1右子树个数 </span></span><br><span class="line">                nums[i] = nums[i]+(nums[i-j-<span class="number">1</span>]*nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>LC101 Symmetric Tree</title>
    <url>/2020/LC101-Symmetric-Tree/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">For example, <span class="keyword">this</span> binary tree [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>] is symmetric:</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span></span><br><span class="line"> / \ / \</span><br><span class="line"><span class="number">3</span>  <span class="number">4</span> <span class="number">4</span>  <span class="number">3</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">But the following [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="keyword">null</span>,<span class="number">3</span>,<span class="keyword">null</span>,<span class="number">3</span>] is not:</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">2</span></span><br><span class="line">   \   \</span><br><span class="line">   <span class="number">3</span>    <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> helper(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">helper</span><span class="params">(TreeNode left, TreeNode right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left ==<span class="keyword">null</span> &amp;&amp; right ==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span> || right==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//左=右 左的左=右的右 左的右=右的左</span></span><br><span class="line">        <span class="keyword">return</span> (left.val==right.val) &amp;&amp; helper(left.left, right.right) &amp;&amp; helper(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC098 Validate Binary Search Tree</title>
    <url>/2020/LC098-Validate-Binary-Search-Tree/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Example <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">1</span>   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">Input: [<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">Output: <span class="keyword">true</span></span><br><span class="line">Example <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">1</span>   <span class="number">4</span></span><br><span class="line">     / \</span><br><span class="line">    <span class="number">3</span>   <span class="number">6</span></span><br><span class="line"></span><br><span class="line">Input: [<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line">Output: <span class="keyword">false</span></span><br><span class="line">Explanation: The root node<span class="string">'s value is 5 but its right child'</span>s value is <span class="number">4</span>.</span><br></pre></td></tr></table></figure>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack =<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> left_child_val = - Double.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty() || root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            root=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(root.val&lt;=left_child_val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            left_child_val=root.val;</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC102 Binary Tree Level Order Traversal</title>
    <url>/2020/LC102-Binary-Tree-Level-Order-Traversal/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given binary tree [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line"><span class="keyword">return</span> its level order traversal as:</span><br><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> LinkedList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//当前层有多少节点</span></span><br><span class="line">            <span class="keyword">int</span> size=queue.size();</span><br><span class="line">            LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                TreeNode node =queue.pop();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC104 Maxium Depth of Binary Tree</title>
    <url>/2020/LC104-Maxium-Depth-of-Binary-Tree/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Given binary tree [<span class="number">3</span>,<span class="number">9</span>,<span class="number">20</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line"></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line"><span class="keyword">return</span> its depth = <span class="number">3</span>.</span><br></pre></td></tr></table></figure>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Recursion </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> left_height = maxDepth(root.left);</span><br><span class="line">            <span class="keyword">int</span> right_height = maxDepth(root.right);</span><br><span class="line">            <span class="keyword">return</span> java.lang.Math.max(left_height, right_height) +<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//stack iteration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; depths = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        stack.add(root);</span><br><span class="line">        depths.add(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>, current_depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//取出stack Linkedlist 最后一个并且移除</span></span><br><span class="line">            root = stack.pollLast();</span><br><span class="line">            current_depth = depths.pollLast();</span><br><span class="line">            <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                depth = Math.max(depth, current_depth);</span><br><span class="line">                stack.add(root.left);</span><br><span class="line">                stack.add(root.right);</span><br><span class="line">                <span class="comment">//?</span></span><br><span class="line">                depths.add(current_depth +<span class="number">1</span>);</span><br><span class="line">                depths.add(current_depth +<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC105 Construct Binary Tree from Preorder and Inorder Traversal</title>
    <url>/2020/LC105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder == <span class="keyword">null</span> || inorder==<span class="keyword">null</span> || preorder.length==<span class="number">0</span> || preorder.length!= inorder.length) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> buildTreeHelper(preorder, inorder, <span class="number">0</span>, <span class="number">0</span>, preorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//root=preorder[pre_st]</span></span><br><span class="line">    <span class="comment">//inorder 两个指针 start和end   preorder 一个start指针</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">buildTreeHelper</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> pre_st, <span class="keyword">int</span> in_st, <span class="keyword">int</span> in_end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pre_st &gt; preorder.length || in_st &gt; in_end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        TreeNode current = <span class="keyword">new</span> TreeNode(preorder[pre_st]);</span><br><span class="line">        <span class="comment">//inorder中寻找root i是在inorder中root所在位置</span></span><br><span class="line">        <span class="keyword">int</span> i=in_st;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;= in_end)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[i] ==preorder[pre_st]) <span class="keyword">break</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//pre_st+1: 左子树就是preorder[pre_st+1]</span></span><br><span class="line">        <span class="comment">//in_st i-1: 下个左区间是 inorder[in_st]~inorder[i-1]</span></span><br><span class="line">        current.left = buildTreeHelper(preorder, inorder, pre_st+<span class="number">1</span>, in_st, i-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//右子树在preorder里面 root现在在的位置跳过inorder里面的左区间</span></span><br><span class="line">        <span class="comment">//然后调整右区间指针</span></span><br><span class="line">        current.right = buildTreeHelper(preorder, inorder, pre_st+(i-in_st+<span class="number">1</span>), i+<span class="number">1</span>, in_end);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Questions"><a href="#Questions" class="headerlink" title="Questions"></a>Questions</h1>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC114 Flatten Binary Tree to Linked List</title>
    <url>/2020/LC114-Flatten-Binary-Tree-to-Linked-List/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">For example, given the following tree:</span><br><span class="line"></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">2</span>   <span class="number">5</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span></span><br><span class="line">The flattened tree should look like:</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"> \</span><br><span class="line">  <span class="number">2</span></span><br><span class="line">   \</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">     \</span><br><span class="line">      <span class="number">4</span></span><br><span class="line">       \</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">         \</span><br><span class="line">          <span class="number">6</span></span><br></pre></td></tr></table></figure>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>树类问题大多都是递归<br>结束条件大多是node==null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//左子树先flatten  </span></span><br><span class="line"><span class="comment">//右子树指针连左子树 断掉的右子树连接新的连上去的右子树</span></span><br><span class="line"><span class="comment">//end condition</span></span><br><span class="line"><span class="comment">//flatten left</span></span><br><span class="line"><span class="comment">//flatten right</span></span><br><span class="line"><span class="comment">//combine right and left</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flatten</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        flatten(root.left);</span><br><span class="line">        flatten(root.right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断已经没有左子树的情况</span></span><br><span class="line">        <span class="keyword">if</span>(root.left !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//记住右子树</span></span><br><span class="line">            TreeNode rightNode = root.right;</span><br><span class="line">            <span class="comment">//右指针指到左子树</span></span><br><span class="line">            root.right = root.left;</span><br><span class="line">            <span class="comment">//左指到null</span></span><br><span class="line">            root.left = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//寻找左节点最后一个节点</span></span><br><span class="line">            TreeNode leftLastNode = root;</span><br><span class="line">            <span class="keyword">while</span>(leftLastNode.right != <span class="keyword">null</span>)&#123;</span><br><span class="line">                leftLastNode = leftLastNode.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到后连接右子树</span></span><br><span class="line">            leftLastNode.right = rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>LC121 Best Time to Buy and Sell Stock</title>
    <url>/2020/LC121-Best-Time-to-Buy-and-Sell-Stock/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: [7,1,5,3,6,4]<br>Output: 5<br>Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.<br>             Not 7-1 = 6, as selling price needs to be larger than buying price.<br>Example 2:</p>
<p>Input: [7,6,4,3,1]<br>Output: 0<br>Explanation: In this case, no transaction is done, i.e. max profit = 0.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//two pointers</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(prices ==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> max =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;prices.length; j++)&#123;</span><br><span class="line">                max = Math.max(prices[j]-prices[i], max);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//one pass</span></span><br><span class="line"><span class="comment">//比较今天和昨天收益</span></span><br><span class="line"><span class="comment">//新建一个temp存minprice</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minprice = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">int</span> maxprofit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prices[i] &lt; minprice)&#123;</span><br><span class="line">                minprice = Math.min(prices[i], minprice);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                maxprofit = Math.max(maxprofit, prices[i]-minprice);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxprofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC136 Single Number</title>
    <url>/2020/LC136-Single-Number/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: [2,2,1]<br>Output: 1<br>Example 2:</p>
<p>Input: [4,1,2,1,2]<br>Output: 4</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; noDuplicateList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!noDuplicateList.contains(i))&#123;</span><br><span class="line">                noDuplicateList.add(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                noDuplicateList.remove(<span class="keyword">new</span> Integer(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> noDuplicateList.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; hashtable = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            hashtable.put(i, hashtable.getOrDefault(i, <span class="number">0</span>) +<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i: nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hashtable.get(i)==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC138 Copy List with Random Pointer</title>
    <url>/2020/LC138-Copy-List-with-Random-Pointer/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>deep copy<br>Example 1:</p>
<p>Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]<br>Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]<br>Example 2:</p>
<p>Input: head = [[1,1],[2,1]]<br>Output: [[1,1],[2,1]]<br>Example 3:</p>
<p>Input: head = [[3,null],[3,0],[3,null]]<br>Output: [[3,null],[3,0],[3,null]]<br>Example 4:</p>
<p>Input: head = []<br>Output: []<br>Explanation: Given linked list is empty (null pointer), so return null.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">copyRandomList</span><span class="params">(Node head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//copy call nodes</span></span><br><span class="line">        Node cur= head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(cur, <span class="keyword">new</span> Node(cur.val, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//assign next and random pointers</span></span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//连next pointer</span></span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            <span class="comment">//连random </span></span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>LC300 Longest Increasing Subsequence</title>
    <url>/2020/LC300-Longest-Increasing-Subsequence/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Input: [10,9,2,5,3,7,101,18]<br>Output: 4<br>Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. </p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//state</span></span><br><span class="line"><span class="comment">//base case</span></span><br><span class="line"><span class="comment">//function</span></span><br><span class="line"><span class="comment">//result </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//state</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        Arrays.fill(dp,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//function</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//result</span></span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;dp.length; i++)&#123;</span><br><span class="line">            res= Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC416 Partition Equal Subset Sum</title>
    <url>/2020/LC416-Partition-Equal-Subset-Sum/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.</p>
<p>Note:</p>
<p>Each of the array element will not exceed 100.<br>The array size will not exceed 200.</p>
<p>Example 1:</p>
<p>Input: [1, 5, 11, 5]</p>
<p>Output: true</p>
<p>Explanation: The array can be partitioned as [1, 5, 5] and [11].</p>
<p>Example 2:</p>
<p>Input: [1, 2, 3, 5]</p>
<p>Output: false</p>
<p>Explanation: The array cannot be partitioned into equal sum subsets.</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//“0-1 背包问题”，它的特点是：“每个数只能用一次”。思路是：物品一个一个选，容量也一点一点放大考虑</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canPartition</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            sum=sum+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//和是奇数 无法分成两半</span></span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> target = sum/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//state [物品索引][背包容量]</span></span><br><span class="line">        <span class="comment">//一个一个物品放 容量一点一点加</span></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length][target+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="comment">//放第一个物品时 只能让背包刚好装下 不然后面的归纳过来都是false</span></span><br><span class="line">        <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//state</span></span><br><span class="line">        <span class="comment">//当前target只要nums[0-i]其中一个能放进去就是 true</span></span><br><span class="line">        <span class="comment">//所以只要前一个是true这个也是true</span></span><br><span class="line">        <span class="comment">//或者组合前一个数即 当前数加上前一个数放[target-当前数]时是true</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;target+<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//容量不足 不装进当前物品</span></span><br><span class="line">                <span class="keyword">if</span>(j-nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//容量够 装入或者不装入</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=dp[i-<span class="number">1</span>][j] || dp[i-<span class="number">1</span>][j-nums[i]];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"><span class="comment">//                 //默认当前就是上次的T/F</span></span><br><span class="line"><span class="comment">//                 dp[i][j] = dp[i-1][j];</span></span><br><span class="line"><span class="comment">//                 //当前1个数就正好=target</span></span><br><span class="line"><span class="comment">//                 if(nums[i] == j)&#123;</span></span><br><span class="line"><span class="comment">//                     dp[i][j] = true;</span></span><br><span class="line"><span class="comment">//                     continue;</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line">                </span><br><span class="line"><span class="comment">//                 //当前数&lt;target</span></span><br><span class="line"><span class="comment">//                 if(nums[i] &lt; j)&#123;</span></span><br><span class="line"><span class="comment">//                     dp[i][j] = dp[i-1][j] || dp[i-1][j-nums[i]];</span></span><br><span class="line"><span class="comment">//                 &#125;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>][target];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>Knapsack problem</tag>
      </tags>
  </entry>
  <entry>
    <title>LC322 Coin Change</title>
    <url>/2020/LC322-Coin-Change/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: coins = [1, 2, 5], amount = 11<br>Output: 3<br>Explanation: 11 = 5 + 5 + 1<br>Example 2:</p>
<p>Input: coins = [2], amount = 3<br>Output: -1</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//state: 需要多少硬币凑成目标amount</span></span><br><span class="line">        <span class="comment">//由于硬币数量无限，所以唯一的状态就是目标金额 amount</span></span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//base case</span></span><br><span class="line">        <span class="comment">//初始化为 amount + 1 就相当于初始化为正无穷，便于后续取最小值</span></span><br><span class="line">        Arrays.fill(dp, amount+<span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//function</span></span><br><span class="line">        <span class="comment">//当前最优解是</span></span><br><span class="line">        <span class="comment">//dp[i] = min(dp[i], dp[i-能减去的当前硬币面值]+1) </span></span><br><span class="line">        <span class="comment">//用每个硬币来试 面值小于amount才能试 当前amount能减去当前试的硬币那就是amount减去的那个状态+1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;amount+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//求amount为i时 用哪个硬币数量最少</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;coins.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(coins[j] &lt;= i)&#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i-coins[j]]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(dp[amount]&gt;amount)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[amount];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
  <entry>
    <title>LC518 Coin Change 2</title>
    <url>/2020/LC518-Coin-Change-2/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Example 1:</p>
<p>Input: amount = 5, coins = [1, 2, 5]<br>Output: 4<br>Explanation: there are four ways to make up the amount:<br>5=5<br>5=2+2+1<br>5=2+1+1+1<br>5=1+1+1+1+1<br>Example 2:</p>
<p>Input: amount = 3, coins = [2]<br>Output: 0<br>Explanation: the amount of 3 cannot be made up just with coins of 2.<br>Example 3:</p>
<p>Input: amount = 10, coins = [10]<br>Output: 1</p>
<p>Note:</p>
<p>You can assume that</p>
<p>0 &lt;= amount &lt;= 5000<br>1 &lt;= coin &lt;= 5000<br>the number of coins is less than 500<br>the answer is guaranteed to fit into signed 32-bit integer</p>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> amount, <span class="keyword">int</span>[] coins)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//state: dp是有多少种凑法 变量硬币种类和amount</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[coins.length+<span class="number">1</span>][amount+<span class="number">1</span>];</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//base 一种方法 不放硬币</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=coins.length; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//function</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;coins.length+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;amount+<span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="comment">//放进背包</span></span><br><span class="line">                <span class="keyword">if</span>(j  &gt;= coins[i-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="comment">//不把coins[i]放进背包 + coins[i]放进背包</span></span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-coins[i-<span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//不放</span></span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[coins.length][amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// class Solution &#123;</span></span><br><span class="line"><span class="comment">//     public int change(int amount, int[] coins) &#123;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         //state: how many cases in dp[amount]</span></span><br><span class="line"><span class="comment">//         int[] dp = new int[amount+1];</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         //base case</span></span><br><span class="line"><span class="comment">//         dp[0]=1;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">//         //function</span></span><br><span class="line"><span class="comment">//         for(int i=0; i&lt;coins.length; i++)&#123;</span></span><br><span class="line"><span class="comment">//             for(int x= coins[i]; x&lt;amount+1; ++x)&#123;</span></span><br><span class="line"><span class="comment">//                 dp[x] = dp[x] + dp[x-coins[i]]; </span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return dp[amount];</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Leetcode</category>
        <category>DP</category>
      </categories>
  </entry>
</search>
